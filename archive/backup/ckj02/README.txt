CKenJa Root LibraryはCKenJaが使う共通化ライブラリ。
スニーク検知のpredicateや、ニンジン棒検知のスコアボード、クロスボウ検知の進捗等のよく使うファイルを一か所にまとめたもの。
最近はtick内でより早く/より遅れて関数を実行できる仕組みも搭載した。
ぶっちゃけ私しか使わないけど他に書くところもないのでここに書く。

*バージョンと名前空間
このライブラリの名前空間はckenjaの略、ckjとバージョンを組み合わせて「ckj00」というようなものになっている。
このライブラリで追加されるスコアボードなどにも頭に「ckj00_」が付く。
これは別のバージョンのライブラリが入っていても、名前空間を別にすることで競合を防ぐためだ。
同じバージョンならファイルは完全一致するので、競合はしない。理論上。
現在のバージョンは2で、名前空間はckj02
このチュートリアル内では名前空間はckj00と記載する。

バージョンは、既存のファイルが変更するときに行う。
新規ファイル追加はマイナーアップデートで、名前空間の変更は行われない

*予定されている機能
- プレイヤーがワールドに入ったときに実行される進捗と関数タグ
-- UUIDが入った専用スコアボード
- load時に@pからDataVersionをckj00_data以下略
- プレイヤーのインベントリ操作の共通化(1.17リリース後、itemコマンドを使用)
- 軽量化のため、エンティティのデータタグ操作の共通化(storageに一括コピー、一括merge)
- 樽やインベントリの前tickのデータと比較等
- カスタムGUI(樽/チェストトロッコ)のライブラリ
- アンインストールの対応
- storageでディメンションの領域管理
- Loottableの共通化(モブにアンカーアイテムを落とさせてそれにコマンドを実行する等。predicateを使えば死因を限定できる..?)
- ブロック破壊進捗とか、追加predicateとか
- 便乗モブスポーンの共通化
- 食べ物のエフェクトや満腹度管理の共通化

*禁止事項
- 元ファイルの改竄
- 外からのin_root関数タグの使用
- 外からの検知スコアボードの使用

*必須事項
- lantern loadの使用(バージョン2以降)

*できれば
- mc datapacks conventionに従うこと。
- 配布前にここを見てこの通り実装できているか確認すること。

*rootモジュール
|追加バージョン|1|
これは@eの使用を出来るだけ減らすためのモジュール。
root内で一度全エンティティに関数タグを実行し、関数タグに登録した関数でエンティティを判別する。
原則CKenJa Root Libraryを使うデータパックの毎tick実行する関数はここで追加される関数タグに登録しなければならない。
**使い方。
関数タグ#minecraft:tickに#ckj00:root/tickを登録する。
後はデータパックで使う毎tick実行する関数を書く関数タグに登録していく。
バージョン2現在、関数タグは6種×4=24個
各種類でこれら4つの関数タグを持っている。
これはlatern loadを参考にしている。
|in_root|ckenja root library内で使う。1番速いが原則外からは使わない。|
|early|他より早く実行したいときに使う。外から使える関数タグの中では1番早く実行される。|
|standard|普通に使う分にはここに登録する。外から使える関数タグの中では2番目に実行される。|
|late|他より遅く実行したいときに使う。最後に実行される。|

**関数タグの種類
関数タグの種類は現在6種あり、それぞれ4つの関数タグを持っている
***before_entity
エンティティに対して関数タグを実行する前、最初に実行される。
実行者・位置 : サーバー
***entity
エンティティに対して実行する関数タグ。
実行者・位置 : プレイヤーを除く全エンティティ
***player/before_reset_score
プレイヤーに対して実行する関数タグ。
プレイヤー関連の処理は殆どここで行う。
スコアをリセットする前なので、検知スコアボードが使える。
実行者・位置 : プレイヤー
***player/reset_score
プレイヤーの検知スコアボードをリセットする関数タグ。
実行者・位置 : プレイヤー
***player/after_reset_score
プレイヤーに対して実行する関数タグ。
スコアをリセットした後なので、検知スコアボードが使えない。
殆ど使う場面はないだろう。
実行者・位置 : プレイヤー
***after_entity
エンティティに対して関数タグを実行した後、最後に実行される。
実行者・位置 : サーバー

*dataモジュール
|追加バージョン|1|
計算等に使う一時データや、scoreboard players operatonで使う定数、汎用性の高い時刻などのスコアボード等の置き場の共通化。
このモジュールではckj00_dataスコアボードを使用する。
**禁止事項
- ckj00_dataをダミープレイヤー以外に与えること。
- 一時データ以外の外部からの変更
**使い方
lantern loadの関数タグ#load:standardにckj00:data/loadを登録する。
これは、load時にこのモジュールをlantern loadの#load:loadにそのload関数を入れることで使えるようにするため。
**一時データ
一時データはckj00_dataの#tmpから始まるダミープレイヤーに置いておく。
#tmpから始まるなら何でも構わないので、#tmp_posxでも、#tmp2でも、#tmpでも良い。
他のデータパックから書き換えられる可能性があるので、そのtick functionグループ内でしか使ってはならない。
また、使うときは初期化をするとバグを防ぐのに有効。
**定数データ
数値データはckj00_dataの#と数字を組み合わせたダミープレイヤーに置いておく。
例: #0 #4 #-2 
***使い方
使いたい数値をload時にセットする必要がある。
+ ckj02:data/load/[数値]という名前の関数を用意する。
  例: ckj02:data/load/-32
+ その関数の中に以下のコマンドを記載する。
=|BOX|
scoreboard players set #[数値] ckj02_data [数値]
||=
+この関数を、#ckj00:data/loadに登録する。
**その他データ
時刻などのデータは#ckj00:root/before_entity/in_rootに登録したckj00:data/tick/内の関数で毎tick取得する。
今の所特にないので出来たら記載する。
***dimension
dimensionモジュールのディメンションが正常に読み込まれているかload時に確認する。値は0か1。

**乱数
未実装。使いたくなったら呼び出し形式で実装する。

*idモジュール
エンティティの ID登録を行うモジュール。
眷属エンティティが持ち主のプレイヤーを識別するときによく使う。
最近UUIDを直接スコアボードに入れられるようになったがそれは面倒なのでまだまだ現役。
ちなみに私が一番最初に作ったデータパックである。
[[ちぇん氏のこの発言をもとにしている。>https://forum.civa.jp/viewtopic.php?f=6&t=200]]
**使い方
#minecraft:loadにckj00:id/loadを、ckj00:root/player/before_reset_score/in_rootにckj00:id/tickを登録する。
エンティティにIDを割り振りたい場合はコマンド実行者がエンティティの状態でfunction ckj00:id/registerを実行する。

*scoresモジュール
検知用のスコアボードをまとめたモジュール。
そのうち増える。
**使い方
ckj00:scores/load/内の関数を#minecraft:loadに登録する。
ckj00:scores/tick/内の関数を#ckj00:root/player/reset_score/in_rootに登録する。
**リスト
***ニンジン棒検知
ckj00_coas
coasはCarrot On A Stickの略。
***スニーク時間
ckj00_sneak
スニークし続けた時間が入っている。
例外的に#ckj00:root/player/before_reset_score/in_rootに登録しなければならない。

*predicate
**ckj00:sneak
スニーク検知

**ckj00:random/[確率]
[確率]には0~1の少数値が入る。
random_chanceを使った確率predicate.

*loot_tables
**ckj00:fill_player_head
関数fill_player_headを使った、コマンド実行者の頭を出すloottable。

*dimension
看板とか、loot用のシュルカーボックスとか置ける共通カスタムディメンション
**使い方
ディメンションファイルをデータパック内に入れる。
使用中のみチャンク読み込みをし、使い終わったブロックは破壊すること


*tags
**block
no_collision 当たり判定がない
**entity_types
monster バニラ進捗のモンスターハンターの対象になっているモンスターリスト
undead 全アンデット

*teamモジュール
未実装